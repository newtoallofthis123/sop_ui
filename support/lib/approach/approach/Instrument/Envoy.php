<?php

namespace Approach\Ensemble;
use \Exception;

/**
 * Envoy Approach Instrument
 * 
 * - This Instruments an Envoy control plane as an abstraction on top of Approach layers
 * - Envoy is highly configurable network proxy that can be used to route traffic to different clusters
 * 
 * * *
 * Layers interfaced:
 * 									    ^ 
 * 		• Approach\Orchestra			|	|
 * 		• Approach\Instrument			|	|
 * 		• Approach\Composition				v
 * 
 * * *
 * Info:
 * 
 * Envoy is configured using a YAML file that is generated by the Instrument using Approach gRPC Renderables. This
 * YAML file is then translated into a gRPC request in Envoy::GenerateDeltas(). This is accomplished by using the
 * DNS server in Envoy::fetch on the intranet to match hostnames to IP addresses, defining clusters where a given IP address is
 * the same for multiple hostnames.
 * 
 *
 * 
 * gRPC request is then sent to the Envoy control plane only via Envoy::SyncDelta($envoy_hosts, $grpc_request )
 * 
 * Updates are done in this way purely so the Envoy configuration may be synchronized without restarting. This
 * is done by sending a delta update to the Envoy control plane. The Envoy control plane then merges the delta
 * update with the existing configuration.
 * 
 * 
 * 
 */

class EnvoyHTTPS {
  private $clusters;
  private $tlsCertificates;

  public function __construct($clusters, $tlsCertificates) {
    $this->clusters = [];
    foreach ($clusters as $cluster) {
      $this->clusters[$cluster['hostname']] = new HTTPSClusterDeltaClient($cluster['host'], $cluster['port']);
    }
    $this->tlsCertificates = $tlsCertificates;
  }

  public function sendDeltaUpdate($update, $hostname) {
    if (!isset($this->clusters[$hostname])) {
      throw new Exception('Unknown hostname: ' . $hostname);
    }

    // Send the delta update to the HTTPS cluster using the gRPC client
    $this->clusters[$hostname]->sendDeltaUpdate($update);

    // Send the SDS delta update to resolve the TLS certificate for the hostname
    $this->sendTLSDeltaUpdate($hostname);
  }

  private function sendTLSDeltaUpdate($hostname) {
    if (!isset($this->tlsCertificates[$hostname])) {
      throw new Exception('TLS certificate not found for hostname: ' . $hostname);
    }

    // Send the SDS delta update to resolve the TLS certificate for the hostname
  }
}


// Path: approach\Ensemble\Ensemble.php

/**
 * - Presentation Service
 * - Generic Approach Services
 * 
 */

 
